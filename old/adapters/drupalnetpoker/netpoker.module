<?php

	require_once __DIR__."/netpoker.menu.php";
	require_once __DIR__."/netpoker.functions.php";
	require_once __DIR__."/netpoker.fields.php";

	/**
	 * @file
	 * Module for integrating netpoker into drupal.
	 *
	 * This module can make your drupal site into a poker site.
	 */

	/**
	 * Implements hook_node_insert
	 *
	 * Reload tables in the server on new game.
	 */
	function netpoker_node_insert($node) {
		if ($node->type=="pokertournament") {
			$tournament=new Tournament($node);
			$tournament->handleBonusChange(0);
		}

		if ($node->type=="pokergame") {
			if (!variable_get("netpoker_communicate_with_server")) {
				watchdog("netpoker","game inserted, but server communication is off",array(),WATCHDOG_WARNING);
				return;
			}

			drupal_register_shutdown_function("netpoker_server_request","reloadTables");
		}
	}

	/**
	 * Implements hook_node_delete
	 *
	 * Reload tables in server.
	 */
	function netpoker_node_delete($node) {
		/*if ($node->type=="pokertournament") {
		}*/

		if ($node->type=="pokergame") {
			if (!variable_get("netpoker_communicate_with_server")) {
				watchdog("netpoker","game deleted, but server communication is off",array(),WATCHDOG_WARNING);
				return;
			}

			drupal_register_shutdown_function("netpoker_server_request","reloadTables");
		}
	}

	/**
	 * Implements hook_node_update
	 *
	 * Reload tables in server.
	 */
	function netpoker_node_update($node) {
		if ($node->type=="pokertournament") {
			$tournament=new Tournament($node);
			$original=new Tournament($node->original);
			$tournament->handleBonusChange($original->getBonus());

			if ($tournament->getTotalFee()!=$original->getTotalFee())
				$tournament->unregisterAllUsers($original->getTotalFee());
		}

		if ($node->type=="pokergame") {
			if (!variable_get("netpoker_communicate_with_server")) {
				watchdog("netpoker","game updated, but server communication is off",array(),WATCHDOG_WARNING);
				return;
			}

			drupal_register_shutdown_function("netpoker_server_request","reloadTables");
		}
	}

	/**
	 * Hook node validate.
	 */
	function netpoker_node_validate($node, $form, &$form_state) {
		if ($node->type=="pokertournament") {
			if (!$node->field_netpoker_req_registrations[LANGUAGE_NONE][0]["value"]
					&& !$node->field_netpoker_start_time[LANGUAGE_NONE][0]["value"])
				form_set_error("field_netpoker_req_registrations","Either number of registrations of start time needs to be specified.");

			$totalPayout=0;
			foreach (explode(",", $node->field_netpoker_payout_percent[LANGUAGE_NONE][0]["value"]) as $payoutLevel)
				$totalPayout+=$payoutLevel;

			if ($totalPayout!=100)
				form_set_error("field_netpoker_payout_percent","Payout percentages should add up to 100");

			$original=node_load($node->nid);

			if (isset($original->field_netpoker_tournament_state) &&
					$original->field_netpoker_tournament_state[LANGUAGE_NONE][0]["value"]!=Tournament::REGISTRATION) {
				form_set_error("field_netpoker_tournament_state","Can only change tournaments in registration state.");
				return;
			}

			if ($original && 
					$original->field_netpoker_currency[LANGUAGE_NONE][0]["value"] !=
					$node->field_netpoker_currency[LANGUAGE_NONE][0]["value"]) {
				form_set_error("field_netpoker_currency","Can't change currency for a tournament.");
				return;
			}

			$currency=$node->field_netpoker_currency[LANGUAGE_NONE][0]["value"];

			$oldBonus=0;
			if (isset($original->field_netpoker_bonus[LANGUAGE_NONE][0]["value"]))
				$oldBonus=$original->field_netpoker_bonus[LANGUAGE_NONE][0]["value"];

			$newBonus=0;
			if (isset($node->field_netpoker_bonus[LANGUAGE_NONE][0]["value"]))
				$newBonus=$node->field_netpoker_bonus[LANGUAGE_NONE][0]["value"];

			$bonusDiff=$newBonus-$oldBonus;

			if ($currency && $bonusDiff>0 && $bonusDiff>netpoker_get_balance($currency,array("uid"=>1)))
				form_set_error("field_netpoker_bonus","Not enough funds on admin account for bonus.");
		}
	}

	/**
	 * Implements hook_node_info().
	 *
	 * We provide one node type for poker games.
	 */
	function netpoker_node_info() {
		return array(
			"pokergame"=>array(
				"name"=>t("Pokergame"),
				"base"=>"pokergame",
				"description"=>t("Create a new poker game"),
				"has_title"=>TRUE,
				"title_label"=>t("Game title")
			),

			"pokertournament"=>array(
				"name"=>t("Pokertournament"),
				"base"=>"pokertournament",
				"description"=>t("Create a new poker tournament"),
				"has_title"=>TRUE,
				"has_body"=>TRUE,
				"title_label"=>t("Tournament title"),
				"comment"=>0
			),
		);
	}

	/**
	 * Implements hook_field_access().
	 *
	 * Only administrators are allowed to change users' playmone balance.
	 */
	function netpoker_field_access($op, $field, $type, $entity) {
		//echo "field access...";

		if ($op=="edit" && $field["field_name"]=="field_netpoker_playmoney") {
			if (!user_access("administer users"))
				return FALSE;
		}

		if ($op=="edit" && $field["field_name"]=="field_netpoker_current_players")
			return FALSE;

		if ($op=="edit" && $field["field_name"]=="field_netpoker_registrations")
			return FALSE;

		if ($op=="edit" && $field["field_name"]=="field_netpoker_tournament_state")
			return FALSE;

		if ($field["field_name"]=="field_netpoker_tournament_result")
			return FALSE;
	}

	/**
	 * Implements hook_enable().
	 *
	 * Creates variables and such.
	 */
	function netpoker_enable() {
		foreach (netpoker_get_variable_defaults() as $variable=>$value) {
			if (!variable_get($variable))
				variable_set($variable,$value);
		}

		foreach (netpoker_get_fields() as $f) {
			if (!field_info_field($f["field_name"]))
				field_create_field($f);
		}

		foreach (netpoker_get_field_instances() as $fi) {
			if (!field_info_instance($fi["entity_type"],$fi["field_name"],$fi["bundle"]))
				field_create_instance($fi);
		}

		// Disable comments.
		variable_set("comment_pokertournament",0);
		variable_set("comment_pokergame",0);
	}

	/**
	 * Get allowed values for the curreny field.
	 */
	function netpoker_get_curreny_field_allowed_values() {
		$a=[];
		$currencies=netpoker_get_available_currencies();

		foreach ($currencies as $currency)
			$a[$currency]=$currency;

		return $a;
	}

	/**
	 * Implementation of hook_disable()
	 */
	function netpoker_disable() {
		$result = db_select('node','n')
			->fields('n',array('nid'))
			->condition('type',"pokergame",'=')
			->execute();

		foreach ($result as $record) {
			$node=node_load($record->nid);
			$node->status=0;
			node_save($node);
		}

		foreach (netpoker_get_field_instances() as $fi) {
			$instance=field_info_instance($fi["entity_type"],$fi["field_name"],$fi["bundle"]);

			if ($instance) {
				$instance["deleted"]=1;
				field_update_instance($instance);
			}
		}

		field_purge_batch(1000);
	}

	/**
	 * Create the form for the pokergame node type.
	 */
	function pokergame_form($node, $form_state) {
		$form=node_content_form($node, $form_state);

		return $form;
	}

	/**
	 * Create the form for the pokertournament node type.
	 */
	function pokertournament_form($node, $form_state) {
		$form=node_content_form($node, $form_state);

		$tournament=new Tournament($node);

		if ($tournament->getNumRegistrations())
			drupal_set_message("This tournament has registered users. If you change fee these will be removed.","warning",FALSE);

		return $form;
	}

	/**
	 * Implements hook_node_view().
	 *
	 * Makes the pokergame node show up and adds the play link.
	 */
	function netpoker_node_view($node, $view_mode, $langcode) {
		if ($node->type=="pokergame") {
			drupal_add_js(drupal_get_path("module","netpoker")."/netpoker.js");

			$node->content['extra_link'] = array(
				'#weight' => 10,
				'#theme' => 'link',
				'#path' => 'netpoker/cashGame/'.$node->nid,
				'#text' => t('Open table'),
				'#options' => array(
					'attributes' => array("target"=>"netpoker-cashgame-".$node->nid),
					'html' => FALSE
				),
			);

			if (isset($node->content["field_netpoker_current_players"])) {
				$current=intval($node->content["field_netpoker_current_players"]["#items"][0]["value"]);
				$markup='<span class="netpoker-current-players" cashgame-id="'.$node->nid.'">'.$current.'</span>';
				$node->content["field_netpoker_current_players"][0]["#markup"]=$markup;
			}
		}

		if ($node->type=="pokertournament") {
			drupal_add_js(drupal_get_path("module","netpoker")."/netpoker.js");

			$node->content['tournament_sep_1']=array(
				"#weight"=>100,
				"#theme"=>"container",
				"#attributes"=>array(
					"style"=>"height: 10px"
				),
			);

			$node->content['tournament_open_link'] = array(
				'#weight' => 101,
				'#theme' => 'link',
				'#path' => 'netpoker/tournamentGame/'.$node->nid,
				'#text' => t('Open Tournament'),
				'#options' => array(
					'attributes' => array(
						"target"=>"netpoker-tournament-".$node->nid,
						"class"=>array("button")
					),
					'html' => FALSE
				),
			);
		}
	}

	/**
	 * Implements hook_menu().
	 *
	 * Advertise extra urls available, i.e. for api calls and for configuration.
	 */
	function netpoker_menu() {
		$apiCalls=array(
			"getCashGameTableList", "getUserInfoByToken", "getUserBalance",
			"serverConfig", "cashGame", "bin", "cashGameUserJoin", "cashGameUserLeave",
			"gameStartForCashGame", "gameFinish", "debug", "pollNumPlayers", "skinTest",
			"tournamentInfo", "tournamentGame", "tournamentRegister", "tournamentUnregister",
			"tournamentStart", "tournamentCancel", "tournamentFinish", "gameStartForTournament"
		);

		$items=array();

		foreach ($apiCalls as $apiCall) {
			$items["netpoker/".$apiCall]=array(
				'title' => t('registry.'),
				'page callback' => 'netpoker_'.$apiCall,
				'access arguments' => array('access content'),
				'type' => MENU_CALLBACK
			);
		}

		// Configuration section on the configuration page.
		$items['admin/config/netpoker']=array(
			'title' => 'Netpoker',
			'description' => 'Netpoker Configuration Section',
			'position' => 'left',
			'weight' => -100,
			'page callback' => 'system_admin_menu_block_page',
			'access arguments' => array('administer site configuration'),
			'file' => 'system.admin.inc',
			'file path' => drupal_get_path('module', 'system'),
		);

		// Configuration page, accessible both from the 
		// configuration and from the modules page. 
		$items["admin/modules/netpoker"] = $items['admin/config/netpoker/item'] = array(
			'title' => 'Netpoker',
			'description' => 'Netpoker Configuration',
			'page callback' => 'drupal_get_form',
			'access arguments' => array('access administration pages'),
			'page arguments' => array('netpoker_config_form'),
			'type'=>MENU_NORMAL_ITEM,
		);

		$items["admin/modules/netpoker/default"] = $items['admin/config/netpoker/item/default'] = array(
			'type' => MENU_DEFAULT_LOCAL_TASK,
			'title' => 'Server Settings',
			'weight' => 1,
			'access arguments' => array('access administration pages'),
		);

		$items["admin/modules/netpoker/actions"] = $items['admin/config/netpoker/item/actions'] = array(
			'type' => MENU_LOCAL_TASK,
			'title' => 'Actions',
			'weight' => 2,
			'access arguments' => array('access administration pages'),
			'page callback' => 'netpoker_server_actions'
		);

		$items["admin/modules/netpoker/skin_test"] = $items['admin/config/netpoker/item/skin_test'] = array(
			'type' => MENU_LOCAL_TASK,
			'title' => 'Skin Test',
			'weight' => 2,
			'access arguments' => array('access administration pages'),
			'page callback' => 'netpoker_skin_test_list'
		);

		return $items;
	}

	/**
	 * Test the skin.
	 */
	function netpoker_skin_test_list() {
		$list = array();
		$list['type'] = 'ul';
		$list['title'] = 'Test Cases';
		$list['attributes'] = array('class' => array('list-of-nodes'));
		$list['items'] = array();

		$files=scandir(__DIR__."/viewcases");

		foreach ($files as $file) {
			if (!is_dir(__DIR__."/viewcases/".$file)) {
				$list["items"][]=l($file,"netpoker/skinTest",
					array(
						"attributes"=>array("target"=>"netpoker_skin_test"),
						"query"=>array(
							"case"=>$file
						)
					)
				);
			}
		}

		return theme("item_list", $list);
	}

	/**
	 * Handle server actions.
	 */
	function netpoker_server_actions() {
		$items=array();

		$actions=array(
			array("action"=>"check_status", "text"=>"Check Status"),
			array("action"=>"reload_table_info", "text"=>"Reload Table Information"),
			array("action"=>"stop_server", "text"=>"Stop Server"),
			array("action"=>"sync_number_of_players", "text"=>"Sync Number Of Players"),
		);

		foreach ($actions as $action) {
			$items[$action["action"]] = array(
				'#theme' => 'link',
				'#text' => $action["text"],
				'#path' => "admin/modules/netpoker/actions",
				'#options' => array(
					'attributes' => array('class' => array('button')),
					'html'=>false,
					'query'=>array("action"=>$action["action"])
				),
			);
		}

		$output="Command Output\n==============\n\n";

		if (isset($_REQUEST["action"])) {
			$res=NULL;

			$output.="** Running ".$_REQUEST["action"]." **\n\n";

			switch ($_REQUEST["action"]) {
				case "check_status":
					$res=netpoker_server_request("info");
					break;

				case "reload_table_info":
					$res=netpoker_server_request("reloadTables");
					break;

				case "stop_server":
					$res=netpoker_server_request("stop");
					break;

				case "sync_number_of_players":
					$res=netpoker_server_request("pollNumPlayers");
					$nodes=entity_load("node",array_keys($res));

					foreach ($nodes as $node) {
						$output.="** Updating table ".$node->nid.": ".$node->title."\n";
						$node->field_netpoker_current_players[LANGUAGE_NONE][0]["value"]=$res[$node->nid];
						field_attach_update("node",$node);
					}

					$output.="\n";

					break;
			}

			$flags=NULL;

			if (defined('JSON_PRETTY_PRINT'))
				$flags=JSON_PRETTY_PRINT;

			$output.=json_encode($res,$flags);
		}

		$items["output"]=array(
			'#type'=>'textarea',
			'#value'=>$output,
			'#attributes'=>array(
				'readonly'=>TRUE,
				'style'=>'background-color: #000000; color: #00ff00; font-family: monospace; height: 500px'
			)
		);

		return $items;
	}

	/**
	 * Implementation of hook_user_view().
	 * TODO: show a default value for playmoney
	 */
	function netpoker_user_view($account, $view_mode, $langcode) {
		if (!$account->field_netpoker_playmoney) {
			$field=field_info_field("field_netpoker_players");
			$instance=field_info_instance("user","field_netpoker_playmoney","user");
			$default_playmoney_amount=intval(variable_get("netpoker_default_playmoney"));

			$account->field_netpoker_playmoney["und"][0]["value"]=$default_playmoney_amount;
			$account->content["field_netpoker_playmoney"]=array(
				"#formatter" => "number_integer",

				"#theme" => "field",
				"#weight" => 0,
				"#title" => $instance["label"],
				"#access" => 1,
				"#label_display" => "above",
				"#view_mode" => "full",
				"#language" => "und",
				"#field_name" => "field_netpoker_playmoney",
				"#field_type" => "number_integer",
				"#field_translatable" => 0,
				"#entity_type" => "user",
				"#bundle" => "user",

				"#items"=>array(
					0=>array(
						"value"=>$default_playmoney_amount
					)
				),
				0=>array(
					"#markup"=>number_format($default_playmoney_amount,0,"."," ")
				)
			);
		}
	}

	/**
	 * The configuration form.
	 */
	function netpoker_config_form($form, &$form_state) {
		$form["netpoker_gameplay_server_host"]=array(
			'#type' => 'textfield',
			'#title' => t('Gameplay Server Host'),
			'#default_value' => variable_get('netpoker_gameplay_server_host', ""),
			'#description' => t('The host that runs the gameplay server. If blank the same host as the main site is assumed.'),
		);

		$form["netpoker_gameplay_server_to_server_host"]=array(
			'#type' => 'textfield',
			'#title' => t('Gameplay Server To Server Host'),
			'#default_value' => variable_get('netpoker_gameplay_server_to_server_host', ""),
			'#description' => t('The gameplay server as seen from the site. If blank the same as the above is assumed.'),
		);

		$form["netpoker_gameplay_server_port"]=array(
			'#type' => 'textfield',
			'#title' => t('Gameplay Server Port'),
			'#default_value' => variable_get('netpoker_gameplay_server_port'),
			'#description' => t('The port where the gameplay server is listening.'),
			'#required' => TRUE,			
		);

		$form["netpoker_gameplay_key"]=array(
			'#type' => 'textfield',
			'#title' => t('Gameplay Server Key'),
			'#default_value' => variable_get('netpoker_gameplay_key'),
			'#description' => t('The server needs to be set up with the same key.'),
			'#required' => TRUE,			
		);

		$form["netpoker_default_playmoney"]=array(
			'#type' => 'textfield',
			'#title' => t('Default Playmoney Amount'),
			'#default_value' => variable_get('netpoker_default_playmoney'),
			'#description' => t('The default amount of playmoney new users will have.'),
			'#required' => TRUE,			
		);

		$form["netpoker_communicate_with_server"]=array(
			'#type' => 'checkbox',
			'#title' => t('Communicate With Server'),
			'#default_value' => variable_get('netpoker_communicate_with_server'),
			'#description' => t('Notify the server about cash game updates. Requires the server to be up.')
		);

		$startcmd=
			"netpokerserver --key=".
			variable_get("netpoker_gameplay_key").
			" --config=".'"'.
			url("netpoker/serverConfig",array("absolute"=>TRUE)).
			'"';

		$t=
			"<div class='form-item'>".
			"<b>Server Startup Command</b><br/>".
			"<input size='60' type='text' value='$startcmd' class='form-text' disabled/>".
			"<div class='description'>Use this command to start the server</div>".
			"</div>";

		$form["netpoker_gameplay_server_info"]=array(
			"#markup"=>$t
		);

		return system_settings_form($form);
	}
